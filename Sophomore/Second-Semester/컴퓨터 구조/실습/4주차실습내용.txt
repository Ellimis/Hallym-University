# 소프트웨어융합 대학 컴퓨터 구조 수업
# 4주차 - 논리 명령어 테스트
# 학번 20195124
# 이름 김민석

	.text
	.globl main
main:
	lw	$s1, first
				# 0100 0110 1010 0001 1111 0000 1011 0111
	li	$s2, 0x46A1F0B7	# load immediate 상수 값 읽기 
				# 상위 16비트(46A1) 은 load upper immediate 명령어(lui)를 통해 레지스터 s2 에 가져감
				# 나머지 하위 16비트(F0B7)은 ori 명령어를 통해 레지스터에 가져감
				# ori 는 or immediate 라 생각중
				# ori $s1, $t0, 즉치값 : t0 과 즉치값을 or 한 결과를 s1 에 저장

	and	$s3, $s1, $s2
	or	$s4, $s1, $s2
	xor	$s5, $s1, $s2
	nor	$s6, $s1, $s2

	li $v0, 10
	syscall
	
	.data
first:	.word 0xFFFF0000 # 1111 1111 1111 1111 0000 0000 0000 0000

------------------------------------------------------------------------------
	.text
	.globl main
main:
	li		$s1, 0x000000FF # load immediate
	
	andi	$s2, $s1, 0xFA34
	ori		$s3, $s1, 0xFA34
	xori	$s4, $s1, 0xFA34

	li $v0, 10
	syscall
	
	.data

------------------------------------------------------------------------------
	.text
	.globl main
main:
	li	$t0, 0x00000080 # 0000 0000 0000 0000 | 0000 0000 1000 0000
	
	sll $s0, $t0, 4 	# 4비트 shift, 논리, 왼쪽으로 shift
						# 0000 0000 0000 0000 | 0000 1000 0000 0000
					
	srl $s1, $t0, 4 	# 4비트 shift, 논리, 오른쪽으로 shift
						# 0000 0000 0000 0000 | 0000 0000 0000 1000
					
	sra $s2, $t0, 4 	# 4비트 shift, 산술, 오른쪽으로 부호 확장 shift
						# 0000 0000 0000 0000 | 0000 0000 0000 1000
	
	li $t1, 0xF0000000 	# 1111 0000 0000 0000 | 0000 0000 0000 0000
	
	sll $s3, $t1, 4 	# 0000 0000 0000 0000 | 0000 0000 0000 0000
	srl $s4, $t1, 4		# 0000 1111 0000 0000 | 0000 0000 0000 0000
	sra $s5, $t1, 4		# 1111 1111 0000 0000 | 0000 0000 0000 0000
	
	li $v0, 10
	syscall
	
	.data

------------------------------------------------------------------------------
	.text
	.globl main
main:
	li	$t0, 0xF0000080 # 1111 0000 0000 0000 | 0000 0000 1000 0000
	li 	$t1, 4 # shift 하는 양을 레지스터에 저장
	
	sllv $s0, $t0, $t1 # shift left logical variable
	srlv $s1, $t0, $t1 # shift right logical variable
	srav $s2, $t0, $t1 # shift right arithmetic variable
	
	li $v0, 10
	syscall
	
	.data

------------------------------------------------------------------------------
	.text
	.globl main
main:
	li 		$t0, 100
	li 		$t1, 30
	
	mult 	$t0, $t1 # $t0 * $t1 -> hi lo 레지스터에 들어감(상위 32, 하위 32씩)
	div 	$t0, $t1 # $t0 / $t1 -> hi lo 레지스터에 들어감(몫 lo, 나머지 hi)
	
	li $v0, 10
	syscall
	
	.data