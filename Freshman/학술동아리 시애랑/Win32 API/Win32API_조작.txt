#include <Windows.h>
#include <tchar.h> //멀티바이트와 유니코드 지원해주는 문자열 형식 함수
#include <time.h>
LRESULT CALLBACK WndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam);
VOID CALLBACK TimerProc(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime);

INT APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevinstance, LPTSTR pszLine, INT nShow) {
	HWND hWnd; //윈도우 핸들
	WNDCLASS wc; //윈도우 스타일이나 크기 등을 받기 위해 선언
	MSG msg;

	wc.style = CS_OWNDC | CS_DBLCLKS; //DBLCLKS 를 넣어야 마우스 더블 클릭할 수 있음
	wc.lpfnWndProc = WndProc; //메세지 처리 함수 지정, 메세지가 전부 이 함수에서 처리
	wc.cbClsExtra = 0;
	wc.cbWndExtra = 0;
	wc.hInstance = hInstance;
	wc.hIcon = LoadIcon(NULL, IDC_ICON);
	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
	wc.hbrBackground = reinterpret_cast<HBRUSH>(GetStockObject(WHITE_BRUSH));
	wc.lpszMenuName = NULL;
	wc.lpszClassName = TEXT("MyApp");

	RegisterClass(&wc); //윈도우 틀 등록, 로그인 같은 형식

	hWnd = CreateWindow(TEXT("MyApp"), TEXT("Sample Application"),
		WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT,
		CW_USEDEFAULT, CW_USEDEFAULT, NULL, NULL, hInstance, NULL);

	ShowWindow(hWnd, SW_SHOW);

	while (GetMessage(&msg, NULL, NULL, NULL)) {
		TranslateMessage(&msg);
		DispatchMessage(&msg);
	}

	return msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hWnd, UINT iMsg, WPARAM wParam, LPARAM lParam) {
	HDC hDC;
	PAINTSTRUCT ps;
	time_t mytime;
	static HANDLE hTimer;
	static HANDLE hTimer2;
	static TCHAR str[26];
	RECT rt = { 100, 100, 400, 120 };
	//static INT x = 100;
	//static INT y = 100;
	//static BOOL bnowDraw = FALSE; 마우스 관련

	//TCHAR szBuff[128]; 
	
	switch (iMsg) {
	case WM_CREATE:
		hTimer = (HANDLE)SetTimer(hWnd, 1, 1000, NULL);
		hTimer2 = (HANDLE)SetTimer(hWnd, 2, 1000, NULL);
		SendMessage(hWnd, WM_TIMER, 1, 0);
		break;
	case WM_TIMER:
		switch (wParam) {
		case 1:
			time(&mytime);
			ctime_s(str, sizeof(str), &mytime);
			InvalidateRect(hWnd, &rt, TRUE);
			break;
		case 2:
			MessageBeep(MB_OK);
			break;
		}
	case WM_PAINT:
		hDC = BeginPaint(hWnd, &ps);
		TextOut(hDC, 100, 100, str, strlen(str) - 1);
		EndPaint(hWnd, &ps);
		break;
	case WM_DESTROY:
		KillTimer(hWnd, 1);
		KillTimer(hWnd, 2);
		PostQuitMessage(0);
		break;
	
	
	/*case WM_LBUTTONDOWN:
		x = (LOWORD(lParam));
		y = (HIWORD(lParam));
		bnowDraw = TRUE;
		break;
	case WM_MOUSEMOVE:
		if (bnowDraw == TRUE) {
			hDC = GetDC(hWnd);
			MoveToEx(hDC, x, y, NULL);
			x = LOWORD(lParam);
			y = HIWORD(lParam);
			LineTo(hDC, x, y);
			ReleaseDC(hWnd, hDC);
		}
		break;
	case WM_LBUTTONUP:
		bnowDraw = FALSE;
		break;
	case WM_LBUTTONDBLCLK:
		InvalidateRect(hWnd, NULL, TRUE);
		return 0;
	*/ //마우스로 그림 그리고 더블클릭시 클리어

		/*switch (wParam) {
		case MK_CONTROL | MK_LBUTTON:
			wsprintf(szBuff, TEXT("ctrl + 마우스 좌표 : (x : %d, y : %d)"), x, y);
			break;
		case MK_SHIFT | MK_LBUTTON:
			wsprintf(szBuff, TEXT("shift + 마우스 좌표 : (x : %d, y : %d)"), x, y);
			break;
		case MK_LBUTTON:
			wsprintf(szBuff, TEXT("마우스 좌표 : (x : %d, y : %d)"), x, y);
			break;
		}
		MessageBox(NULL, TEXT(szBuff), TEXT("Mouse Clicked"), MB_OK);
		break; 
		*/ //마우스 왼클릭시 좌표 출력

	/*case WM_KEYDOWN:
		switch (wParam) {
		case VK_LEFT:
			x -= 8;
			break;
		case VK_RIGHT:
			x += 8;
			break;
		case VK_UP:
			y -= 8;
			break;
		case VK_DOWN:
			y += 8;
			break;
		}
		InvalidateRect(hWnd, NULL, TRUE);
		break;
		 */ //키보드 입력시 이동하는 코드
	}
	return DefWindowProc(hWnd, iMsg, wParam, lParam);
}

void CALLBACK TimerProc(HWND hWnd, UINT uMsg, UINT idEvent, DWORD dwTime) {
	HDC hDC;
	INT i;
	hDC = GetDC(hWnd);
	for (i = 0; i < 100; i++) {
		SetPixel(hDC, rand() % 500, rand() % 400, RGB(rand() % 256, rand() % 256, rand() % 256, ));
	}
	ReleaseDC(hWnd, hDC);
}