#include <stdio.h>
#include <stdlib.h>

typedef struct {
	char name[20];
	char tel[20];

} person_info;

enum mode { Insert = 1, Delete, Search, Print_All, Exit };
char *button[] = {"Insert", "Delete", "Search", "Print All", "Exit"};

void main() {
	/*
	전화번호 관리 프로그램을 작성해 보자. 이 프로그램이 기본적으로 지녀야 하는 기능은 다음과 같다.
	-입력		이름과 전화번호의 입력
	-삭제		이름을 입력하여 해당 이름의 정보 삭제
	-검색		이름을 입력하여 해당 이름의 정보 출력
	-전체출력	저장된 모든 이름과 전화번호 정보를 출력

	다음 실행의 예에서 보이는 바와 유사하게 동작하는 전화번호 관리 프로그램을 구현하시오.
	단, 이 프로그램의 문제점은 프로그램이 종료되고 나면 기존에 저장된 데이터가 전부 사라진다는 것이다.
	이 문제점을 해결하자. 프로그램이 종료되기 전에 파일을 하나 생성해서 기존에 입력 받은 데이터를 저장하고, 
	프로그램을 다시 실행하면 파일에 저장된 데이터를 읽어들이는 방식으로 프로그램을 변경해보자.

	-----실행의 예-----

	***** Menu *****
	1. Insert
	2. Delete
	3. Search
	4. Print All
	5. Exit
	Choose the item: 1
	[ INSERT ]
	Input Name: Yoon
	Input Tel Number: 333-4444
			Data Inserted

	***** Menu *****
	1. Insert
	2. Delete
	3. Search
	4. Print All
	5. Exit
	Choose the item: 1
	[ INSERT ]
	Input Name: Hong
	Input Tel Number: 555-5555
			Data Inserted

	***** Menu *****
	1. Insert
	2. Delete
	3. Search
	4. Print All
	5. Exit
	Choose the item: 4
	[ Print All Data ]
	Name: Yoon	Tel: 333-4444
	Name: Hong	Tel: 555-5555
	*/
	FILE *fp;
	int i, j, n = 0, per_n, end_code = 0;
	char cmp_name[20];
	person_info person[100];

	if (fopen_s(&fp, "Personal_Info.txt", "r") != 0) {
		printf("파일이 없는 최초 실행입니다.\n");
	}
	else {
		while (fscanf_s(fp, "%s %s", (person + n)->name, 20, (person + n)->tel, 20) != EOF) {
			n++;
		}
		fclose(fp);
	}

	while (end_code != -1) {
		printf("***** Menu *****\n");

		for (i = 0; i < 5; i++) {
			printf("%d. %s\n", (i + 1), *(button + i));
		}
		
		printf("Choose One Button : ");
		scanf_s("%d", &per_n);
		getchar();

		switch (per_n) {
		case Insert:
			n += 1;

			printf("[ Insert ]\n");
			printf("Input User Name : ");
			gets((person + n - 1)->name);

			printf("Input Tel Number(use '-' between each of division) : ");
			gets((person + n - 1)->tel);

			printf("\n------ Data Inserted -------\n");
			break;

		case Delete:
			if (n <= 0) {
				printf("\nNo Have Any Person Informations\n");
				printf("Take Another Button\n\n");
				break;
			}

			printf("[ Delete ]\n");
			printf("Input User Name(that will be deleted)\n");
			gets(cmp_name);

			/*for (i = 0; i < n; i++) {
				if (!(strcmp((person + i)->name, cmp_name))) {
					*(person + i)->name = '\0';
					*(person + i)->tel = '\0';
					if(person + i == '\0')
				}
			}*/

			n -= 1;
			//if(!n) person = (person_info *)realloc(person, sizeof(person_info));
			//else person = (person_info *)realloc(person, sizeof(person_info)*n);

			printf("------ Data Deleted ------");
			j = 0;
			while(cmp_name[j++]) cmp_name[j] = '\0'; //또 쓰거나 다른 데서 쓸 수 있으니 미리 비워두기
			break;

		case Search:
			if (n <= 0) {
				printf("\nNo Have Any Person Informations\n");
				printf("Take Another Button\n\n");
				break;
			}
			printf("[ Search ]\n");
			printf("Input User Name(that wants to finding)\n");
			gets(cmp_name);

			for (i = 0; i < n; i++) if (!(strcmp((person + i)->name, cmp_name))) printf("Finded Name : %s, Tel : %s\n", (person + i)->name, (person + i)->tel);

			j = 0;
			while (cmp_name[j++]) cmp_name[j] = '\0';
			printf("------ Data Searched ------\n");
			break;

		case Print_All:
			//[Print All Data]
			//Name: Yoon	Tel : 333 - 4444
			//Name :Hong	Tel : 555 - 5555
			printf("[ Print All Data ]\n");
			for (i = 0; i < n; i++) {
				printf("User Name : %s\tUser Tel : %s\n", (person + i)->name, (person + i)->tel);
			}
			printf("------ Success ------\n");
			break;

		case Exit:
			/*
			프로그램이 종료되기 전에 파일을 하나 생성해서 기존에 입력 받은 데이터를 저장하고, 
			프로그램을 다시 실행하면 파일에 저장된 데이터를 읽어들이는 방식으로 프로그램을 변경해보자.
			*/
			printf("***** System Over. See You Next Time. *****\n");
			end_code = -1;
		
			fopen_s(&fp, "Personal_Info.txt", "w");
			for (i = 0; i < n; i++) {
				fprintf(fp, "%s %s\n", (person + i)->name, (person + i)->tel);
			}
			fclose(fp);
			break;
		}
	}
}