언리얼 화면 구성
	1. 레벨 에디터(Scene) : 레벨(장면)에 엑터(오브젝트)를 배치하고 변경하며, 레벨을 테스트 하는 곳
	2. 뷰포트 : 레벨이 카메라로부터 사용자에게 보여지는 영역
	3. 모드 : 레벨에 엑터나 지오메트리 브러시, 볼륨 등을 빠르게 놓을 수 있도록 해준다.
	4. 컨텐트 브라우저(프로젝트 창) : 에셋들을 임포트하거나 만들 수 있고 게임 내 모든 에셋에 대한 검색 및 상호작용이 가능하다.
	5. 디테일(Inspector) : 현재 선택된 엑터나 에셋들에 대한 정보와 함수들이 있어서 편집이 가능하다.
	6. 월드 아웃라이너(Hierarchy) : 레벨에 배치된 모든 엑터가 계층구조 트리 뷰로 표시된다.
	7. 툴바 : 저장, 플레이, 마켓플레이스 등에 대한 작업과 바로가기 기능들이 있다.
	8. 월드 세팅 : 게임모드나 Pawn, Player Controller class를 지정할 수 있다
	
블루프린트 에디터 화면 구성
	1. Viewport, Construction Script
	2. Event Graph : 노드를 이용하여 변수나 함수를 만들거나 이벤트에 해당하는 작업을 추가할 수 있다.
	2. Components : 현재 블루프린트 객체가 가진 컴포넌트들을 볼 수 있다.
	3. My Blueprint : 변수나 함수를 만들 수 있다
	4. 디테일 : 현재 블루프린트에 대한 정보와 함수들의 편집이 가능하다.
	5. 툴바 : 컴파일, 저장 등의 작업이 있다.

Material 에디터 화면 구성
	1. Graph : 노드 에디터
	2. Palette : 추가할 수 있는 노드들이 있다.
	3. Viewport : 미리 보기
	4. Details
	5. Toolbar

블루프린트 이벤트
	Begin Play : 레벨에 배치되어 게임을 실행했을 때 발생
	Actor Begin Overlap : Overlap 시 발생
	Tick : 매 프레임마다 불리는 이벤트

Actor 컴포넌트 종류
	1. 캡슐 컴포넌트 : 물리 효과가 있는 컴포넌트
	2. Arrow 컴포넌트 : 캐릭터가 향하는 방향이나 발사체가 날라가는 방향
	3. Mesh 컴포넌트 : 물체가 어떻게 생겼는지 정하는 컴포넌트, Skeleton Mesh 컴포넌트나 애니메이션을 넣을 수 있다.
	4. 카메라 컴포넌트, follow 카메라 컴포넌트



Inheritance : 상속
Snap : 이동, 회전, 크기 조절에서 각각의 변화할 단위를 지정하는 것
Blueprint : 비쥬얼 스크립트 언어
Class : 특정 액터 또는 오브젝트의 작동방식 및 프로퍼티를 정의
Actor : C++ 클래스나 Blueprint 클래스로 만든 객체, 레벨에 배치할 수 있는 오브젝트
Component : 액터에 추가시킬 수 있는 함수성 조각
Pawn : Actor의 서브 클래스이며 게임 내 아바타 역할을 한다.
Character : Pawn의 서브 클래스이며 점프, 달리기 등이 추가되어있다.
Character class는 Capsule 컴포넌트, Arrow 컴포넌트, Skeletal Mesh 컴포넌트들을 가진다.

Blueprint Actor 와 C++ Actor의 차이 : C++로 만들면 더 높은 퀄리티를 가진 것을 만들 수 있지만 Blueprint 보다 어렵다. 그렇지만 Blueprint는 이진 파일로 저장을 하기 때문에 여러 사람이 작업할때 충돌이 일어난다. 

3D 오브젝트를 보려면 Mesh와 Material이 필요하다.
	Mesh : 사이즈와 모양을 정한다.
	Material : Mesh가 어떻게 표현되는지 색, 텍스쳐, 재질 등을 정한다.

Mesh 컴포넌트에서 중요한 두가지 컴포넌트
	1. Static Mesh Components for meshes that don’t have animations (for example, cubes, static level geometry)
	2. Skeletal Mesh Components for meshes that have animations (for example, character meshes that play movement animations)

Recursively set translation retargeting skeleton : 관절이 이상하게 어긋나 있는 것을 자동으로 맞춰준다.

Game Mode class : 게임 정지, 시작, 재시작 등의 게임 전체의 흐름을 다루는 클래스
Pawn class : 플레이어나 AI가 제어할 수 있는 모든 액터의 베이스 클래스, 게임 내 플레이어나 개체의 물리적 위치, 방향 등을 나타낸다.
Player Controller class : 사람의 입력을 제어하여 Pawn class에 명령을 내린다. 또는 점수와 같이 게임 끝까지 유지되어야하는 경우들에 쓰인다. Pawn class와 달리 하나의 레벨에 하나만 존재한다. 

animation blueprint
	1. Event Graph(Blueprint Update Animation, Try Get Pawn Owner)
	2. AnimGraph(State Machine, Output Pose)



-- Input
Action Mapping은 점프같은 1회성의 동작으로 눌렸을때와 뗐을 때로 쓴다.
Axis Mapping은 이동같은 연속적인 동작으로 -1~1 사이의 값으로 쓴다.

Player Input 처리 순서
	Hardware Input이 들어오면 PlayerInput class에서 무슨 키인지 확인 후 Player Controller class로 넘겨서 이벤트를 알린다. 그리고 Pawn 클래스와 Pawn 클래스를 상속받는 Character 클래스에서 각 키에 해당하는 이벤트를 실행한다.



-- Trace
Line Trace는 어느 한 지점에서 다른 곳까지 ray를 쏴서 ray와 충돌한 오브젝트를 알 수 있게 해주는 것으로 유니티의 Ray Tracing과 같다.
Ray Tracing에서 Line Trace 옵션
	dashed line : 충돌전 Line Trace
	arrow : 레이 방향
	dotted line : 충돌 후 Line Trace
	striped circle : 충동 지점
	object1 발사 대상, object2 맞은 대상

Edit - Project Settings - Engine - Collision
Trace Channels : Line Trace의 원하지 않는 오브젝트를 무시하는 등의 특성, Visibility, Interaction(Ignore, Overlap, Block), Pawn, Camera 등

	Visibility로 Trace Channel 이용 : ECollisionChannel Channel = ECollisionChannel::ECC_Visibility;
	EnemySight라는 이름으로 Block 선언한 Channel 이용 : ECollisionChannel Channel = ECollisionChannel::ECC_GameTraceChannel1;



-- Collision
Collision에 영향을 주고 받는 컴포넌트 2개
	1. Mesh(Static, Skeletal, Procedural 등)
	2. Shape Object(Collision 이벤트가 발생했는지 체크하는 오브젝트, Box, Sphere, Capsule 오브젝트)

Collision Event
	1. Overlap : 두 개의 오브젝트가 부딪혔지만 서로 없는것 처럼 통과하는 상황
	2. Block : 두 개의 오브젝트가 부딪히면 서로의 진행 경로를 방해해서 튕겨나가는 상황

	Block 시 OnHit 이벤트 발생
	Overlap 시 OnBeginOverlap, OnEndOverlap 이벤트 발생
	Ignore 시 어떠한 이벤트도 발생하지 않는다.

Collision 이벤트에서 봐야하는 것
	1. Physics(response) : 충돌시 어떤 반응을 보일지 결정(Ignore이나 Overlap일시 발생 X)
	2. Query : 이벤트가 발생하는지 안하는지에 대해 찾아봄

Edit - Project Settings - Engine - Collision
Object Channels : Pawn, Static, Physics, Projectile(발사체) 등에 따라 Channel 설정 가능, Type(Blocking, Overlapping, Ignoring)에 따라 설정 가능

Collision Properties
	Simulation Generates Hit Events : OnHit 이벤트를 부를 수 있게 할지 결정, 체크하면 OnHit 이벤트 발생
	Physics Material Override : 유니티의 Physics Material 같이 물리적 속성을 입혀서 마찰력을 줄 수 있음
	Generate Overlap Events : Overlap 시 OnBeginOverlap이나 OnEndOverlap 이벤트를 부를 수 있게 할지 결정
	Can Character Step Up On : 캐릭터가 이 오브젝트에 대해 Step Up 을 쉽게 하려면 Yes
	Collision Presets
		1. Default : 모든 오브젝트에 대해 Block
		2. No Collision : 모든 충돌에 대해 반응 X
		3. Block All : 모든 오브젝트에 대해 Block
		4. Overlap All : 모든 오브젝트에 대해 Overlap
		5. Block all Dynamics : 모든 움직이는 오브젝트들에 대해 Block
		6. Overlap all Dynamics : 모든 움직이는 오브젝트들에 대해 Overlap
		7. Pawn : Pawn이나 Character에만 반응
		8. Physics Actor : 총알이나 Dodgeball 같은 거에만 반응
		9. Custom
			1. Collision Enabled : Query(이벤트 처리)와 Physics(물리 반응)을 넣을지 말지 결정
			2. Object Type
				1. World Static : 레벨에서 움직이지 않는 오브젝트들에 대해
				2. World Dynamic : 레벨에서 움직이는 오브젝트들에 대해
				3. Pawn : 컨트롤 가능하거나 레벨에서 움직이는 것들에 대해
				4. Physics Body : 물리적 시뮬레이션에서 움직이는 것들(총알 등)에 대해
				5. Vehicle : 탈것들에 대해
				6. Destructible : 부셔지는 mesh 들에 대해

Physics Material
	1. Friction : 마찰력
	2. Static Friction : 정지 마찰력, 정지해 있을 때 운동 마찰력 외에 추가로 정지 마찰력을 줘서 움직이기 힘들게 할 수 있다.
	3. Restitution : Bounciness?라 불리는 튀기는 현상, 0이면 전혀 안튀고 1이면 최고 높이까지 튄다
	4. Density : 밀도, 같은 부피의 오브젝트여도 더 많은 무게를 가진다.

Spawn Actor 함수
	1. SpawnActor
	2. SpawnActorDeferred : 생성할 물체의 속도 등을 바꾸고 생성할 수 있음



Utilities : 함수나 Actor 등을 구조화해서 좀더 쉽게 사용하는 방식
	1. Blueprint Function Libraries : 여러 곳에 쓰이는 함수들 모아놓기, KismetMathLibrary, KismetSystemLibrary
	2. Actor Components : Actor 클래스의 소스 코드 일부를 이동할 때, 부모로부터 상속을 받으면 안쓰는 부분이 생길 수 있어서 필요한 부분만 조립해서 사용하기 위함, 인벤토리나 체력 같이 Actor에 붙이는거, Loose Coupling(Actor Component에 로직을 구현해놓고 가져다 씀)
	3. Interfaces : 더 구조화되게 만듬, 소유자는 Interface의 함수들을 반드시 선언해야함, 하나의 동작으로 적과 주인공이 하는게 다를때처럼 객체마다 들어가야하는 공통된 함수들이 있을때 Interface로 선언
	4. Scene Components

Blueprint Function Library : EnemyCharacter에 있는 Can See Actor 이동
Actor Component : Health Component(Code-only Actor Components)
Interface : Health Interface(Blueprint Native Event, UFUNTION(BlueprintNativeEvent, Category= Health) void OnDeath(); virtual void OnDeath_Implementation()=0; 처럼 쓴다)
	void OnDeath()는 Blueprint에서 오버라이드, virtual void OnDeath_Implementation()은 C++에서 오버라이드 하기 위한 선언

Actor Component는 오브젝트에 붙여서 Actor의 역할을 하는가, Scene Component는 오브젝트에 붙여서 씬에서 Transform 하느냐에 따른 차이이다.

